name: Build and Test

on:
  push:
    branches: [ master, dev ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to GitHub Container Registry
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

    - name: Build and run dev container action
      uses: devcontainers/ci@v0.3
      with:
        imageName: ghcr.io/${{ github.repository }}/devcontainer
        cacheFrom: ghcr.io/${{ github.repository }}/devcontainer
        push: filter
        refFilterForPush: refs/heads/master
        runCmd: |
          # Run initialization
          just init

          # Run tests
          # just test-coverage

          # Run lining
          # just lint

          # Build for multiple platforms
          just build-all

          # Test basic functionality
          just version || echo "No VERSION file - expected for new repo"

          # Show build artifacts
          ls -la bin/
        dockerOptions: |
          --volume ${{ github.workspace }}/bin:/workspace/bin

    - name: Upload coverage reports
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.html
        retention-days: 30

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: application-binaries
        path: bin/
        retention-days: 30
#
#  integration-test:
#    runs-on: ubuntu-latest
#    needs: build-and-test
#    env:
#      LINUX_BINARY: versionator-linux-amd64
#
#    steps:
#    - name: Checkout code
#      uses: actions/checkout@v4
#
#    - name: Download build artifacts
#      uses: actions/download-artifact@v4
#      with:
#        name: application-binaries
#        path: bin/
#
#    - name: Make binary executable
#      run: chmod +x bin/${{ env.LINUX_BINARY }}
#
#    - name: Setup integration test environment
#      run: |
#        # Create a temporary directory outside the repository
#        TEMP_TEST_DIR=$(mktemp -d)
#        echo "TEMP_TEST_DIR=$TEMP_TEST_DIR" >> $GITHUB_ENV
#
#        # Copy the integration test script to temp directory
#        cp integration_test/run_integration_test.sh $TEMP_TEST_DIR/
#        chmod +x $TEMP_TEST_DIR/run_integration_test.sh
#
#        # Copy the binary to temp directory for easier access
#        cp bin/${{ env.LINUX_BINARY }} $TEMP_TEST_DIR/
#
#        echo "Integration test environment created at: $TEMP_TEST_DIR"
#
#    - name: Run integration test from outside repository
#      run: |
#        # Change to temp directory (outside repository)
#        cd ${{ env.TEMP_TEST_DIR }}
#
#        # Run the integration test script
#        ./run_integration_test.sh ./${{ env.LINUX_BINARY }}

  release:
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: [build-and-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: application-binaries
        path: bin/

    - name: Create release assets
      run: |
        # Create release directory
        mkdir -p release

        # Copy and rename binaries
        cp bin/versionator-linux-amd64 release/versionator-linux-amd64
        cp bin/versionator-darwin-amd64 release/versionator-darwin-amd64
        cp bin/versionator-darwin-arm64 release/versionator-darwin-arm64
        cp bin/versionator-windows-amd64.exe release/versionator-windows-amd64.exe

        # Create checksums
        cd release
        sha256sum * > checksums.txt
        ls -la

    - name: Upload release artifact - Windows/amd64
      uses: actions/upload-artifact@v4
      with:
        name: versionator.exe
        path: release/versionator-windows-amd64.exe
        retention-days: 90

    - run: echo hello > world.txt
    - uses: actions/upload-artifact@v4
      with:
        name: hello
        path: world.txt