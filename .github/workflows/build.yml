name: Build and Test

on:
  push:
    branches: [ master, dev ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to GitHub Container Registry
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

    - name: Build and run dev container action
      uses: devcontainers/ci@v0.3
      with:
        imageName: ghcr.io/${{ github.repository }}/devcontainer
        cacheFrom: ghcr.io/${{ github.repository }}/devcontainer
        push: filter
        refFilterForPush: refs/heads/master
        runCmd: |
          # Run initialization
          just init

          # Run tests
          # just test-coverage

          # Run linting
          # just lint

          # Build for multiple platforms
          just build-all

          # Test basic functionality
          just version || echo "No VERSION file - expected for new repo"

          # Show build artifacts
          ls -la bin/

    - name: Upload coverage reports
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.html
        retention-days: 30

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: application-binaries
        path: bin/
        retention-days: 30

  integration-test:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: application-binaries
        path: bin/

    - name: Make binary executable
      run: chmod +x bin/application-linux-amd64

    - name: Integration test
      run: |
        # Initialize VERSION file
        echo "1.0.0" > VERSION

        # Test version reading
        VERSION=$(./bin/versionator-linux-amd64 version)
        echo "Current version: $VERSION"

        # Test version incrementing
        ./bin/versionator-linux-amd64 patch increment
        NEW_VERSION=$(./bin/versionator-linux-amd64 version)
        echo "New version: $NEW_VERSION"

        # Verify version changed
        if [ "$VERSION" = "$NEW_VERSION" ]; then
          echo "ERROR: Version did not increment"
          exit 1
        fi

        echo "Integration test passed!"

  release:
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: [build-and-test, integration-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: application-binaries
        path: bin/

    - name: Create release assets
      run: |
        # Create release directory
        mkdir -p release

        # Copy and rename binaries
        cp bin/versionator-linux-amd64 release/versionator-linux-amd64
        cp bin/versionator-darwin-amd64 release/versionator-darwin-amd64
        cp bin/versionator-darwin-arm64 release/versionator-darwin-arm64
        cp bin/versionator-windows-amd64.exe release/versionator-windows-amd64.exe

        # Create checksums
        cd release
        sha256sum * > checksums.txt
        ls -la

    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: application-release
        path: release/
        retention-days: 90
