// Code generated by MockGen. DO NOT EDIT.
// Source: application/internal/vcs (interfaces: VersionControlSystem)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockVersionControlSystem is a mock of VersionControlSystem interface.
type MockVersionControlSystem struct {
	ctrl     *gomock.Controller
	recorder *MockVersionControlSystemMockRecorder
}

// MockVersionControlSystemMockRecorder is the mock recorder for MockVersionControlSystem.
type MockVersionControlSystemMockRecorder struct {
	mock *MockVersionControlSystem
}

// NewMockVersionControlSystem creates a new mock instance.
func NewMockVersionControlSystem(ctrl *gomock.Controller) *MockVersionControlSystem {
	mock := &MockVersionControlSystem{ctrl: ctrl}
	mock.recorder = &MockVersionControlSystemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVersionControlSystem) EXPECT() *MockVersionControlSystemMockRecorder {
	return m.recorder
}

// CreateTag mock base method.
func (m *MockVersionControlSystem) CreateTag(tagName, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTag", tagName, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTag indicates an expected call of CreateTag.
func (mr *MockVersionControlSystemMockRecorder) CreateTag(tagName, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTag", reflect.TypeOf((*MockVersionControlSystem)(nil).CreateTag), tagName, message)
}

// GetRepositoryRoot mock base method.
func (m *MockVersionControlSystem) GetRepositoryRoot() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositoryRoot")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepositoryRoot indicates an expected call of GetRepositoryRoot.
func (mr *MockVersionControlSystemMockRecorder) GetRepositoryRoot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoryRoot", reflect.TypeOf((*MockVersionControlSystem)(nil).GetRepositoryRoot))
}

// GetVCSIdentifier mock base method.
func (m *MockVersionControlSystem) GetVCSIdentifier(length int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVCSIdentifier", length)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVCSIdentifier indicates an expected call of GetVCSIdentifier.
func (mr *MockVersionControlSystemMockRecorder) GetVCSIdentifier(length interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVCSIdentifier", reflect.TypeOf((*MockVersionControlSystem)(nil).GetVCSIdentifier), length)
}

// IsRepository mock base method.
func (m *MockVersionControlSystem) IsRepository() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRepository")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRepository indicates an expected call of IsRepository.
func (mr *MockVersionControlSystemMockRecorder) IsRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRepository", reflect.TypeOf((*MockVersionControlSystem)(nil).IsRepository))
}

// IsWorkingDirectoryClean mock base method.
func (m *MockVersionControlSystem) IsWorkingDirectoryClean() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsWorkingDirectoryClean")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsWorkingDirectoryClean indicates an expected call of IsWorkingDirectoryClean.
func (mr *MockVersionControlSystemMockRecorder) IsWorkingDirectoryClean() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsWorkingDirectoryClean", reflect.TypeOf((*MockVersionControlSystem)(nil).IsWorkingDirectoryClean))
}

// Name mock base method.
func (m *MockVersionControlSystem) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockVersionControlSystemMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockVersionControlSystem)(nil).Name))
}

// TagExists mock base method.
func (m *MockVersionControlSystem) TagExists(tagName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagExists", tagName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagExists indicates an expected call of TagExists.
func (mr *MockVersionControlSystemMockRecorder) TagExists(tagName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagExists", reflect.TypeOf((*MockVersionControlSystem)(nil).TagExists), tagName)
}